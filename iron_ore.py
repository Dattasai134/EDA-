# -*- coding: utf-8 -*-
"""Iron_ore.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NYpsvKLxt8ORFFtJ3blXBwL2h_jCTDGK
"""

import pandas as pd

df = pd.read_csv('Iron_ore.csv')
df

df.isnull().sum()

df.duplicated().sum()

df['IronOre_mining_Index'].fillna(df['IronOre_mining_Index'].median(), inplace=True)
df['Global_Price_of_IronOre'].fillna(df['Global_Price_of_IronOre'].median(), inplace=True)
df['OECD'].fillna(df['OECD'].median(), inplace=True)
df['Global_Price'].fillna(df['Global_Price'].median(), inplace= True)
df['Primary_metal_production_index'].fillna(df['Primary_metal_production_index'].median(), inplace= True)
df

df.isnull().sum()

# prompt: check outliers in "IronOre_mining_Index,	Global_Price_of_IronOre, Dow_Jones, SandP_500, NASDAQ, Federal_funds_rate, OECD, China_and_US_Foreign_Exchange_Rate,	Nikkei_Stock_Average	Global_Price,	Primary_metal_production_index" columns show box plot as well

import seaborn as sns
import matplotlib.pyplot as plt

# List of columns to check for outliers
columns = ['IronOre_mining_Index', 'Global_Price_of_IronOre', 'Dow_Jones', 'SandP_500', 'NASDAQ', 'Federal_funds_rate', 'OECD', 'China_and_US_Foreign_Exchange_Rate', 'Nikkei_Stock_Average', 'Global_Price', 'Primary_metal_production_index']

# Create boxplots for each column
for column in columns:
  plt.figure()
  sns.boxplot(x=df[column])
  plt.title(f'Boxplot of {column}')
  plt.show()

# prompt: normalise the outliers for the columns  'IronOre_mining_Index', 'SandP_500', 'NASDAQ', 'OECD', 'Global_Price', ''Primary_metal_production_index'

import matplotlib.pyplot as plt
import numpy as np

# Define the columns to normalize
columns = ['IronOre_mining_Index', 'SandP_500', 'NASDAQ', 'OECD', 'Global_Price', 'Primary_metal_production_index']

# Normalize the outliers for each column
for column in columns:
  # Calculate the z-score for each data point
  z_scores = np.abs((df[column] - df[column].mean()) / df[column].std())

  # Define the threshold for outlier identification
  threshold = 3

  # Replace outliers with the mean
  df[column] = df[column].where(z_scores < threshold, df[column].mean())

# Check for remaining outliers
for column in columns:
  plt.figure()
  sns.boxplot(x=df[column])
  plt.title(f'Boxplot of {column}')
  plt.show()

import matplotlib.pyplot as plt
# Define the columns to trim outliers from
columns = ['IronOre_mining_Index', 'SandP_500', 'NASDAQ', 'OECD', 'Global_Price', 'Primary_metal_production_index']

# Calculate the interquartile range for each column
Q1 = df[columns].quantile(0.25)
Q3 = df[columns].quantile(0.75)
IQR = Q3 - Q1

# Define the lower and upper bounds for outlier trimming
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Trim outliers for each column
for column in columns:
  df = df[(df[column] >= lower_bound[column]) & (df[column] <= upper_bound[column])]

# Check for remaining outliers
for column in columns:
  plt.figure()
  sns.boxplot(x=df[column])
  plt.title(f'Boxplot of {column}')
  plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Define the columns to normalize
columns = ['NASDAQ']

# Normalize the outliers for each column
for column in columns:
  # Calculate the z-score for each data point
  z_scores = np.abs((df[column] - df[column].mean()) / df[column].std())

  # Define the threshold for outlier identification
  threshold = 3

  # Replace outliers with the mean
  df[column] = df[column].where(z_scores < threshold, df[column].mean())

# Check for remaining outliers
for column in columns:
  plt.figure()
  sns.boxplot(x=df[column])
  plt.title(f'Boxplot of {column}')
  plt.show()

import matplotlib.pyplot as plt
# Define the column with remaining outlier
column = 'NASDAQ'

# Calculate the interquartile range for the column
Q1 = df[column].quantile(0.25)
Q3 = df[column].quantile(0.75)
IQR = Q3 - Q1

# Define the lower and upper bounds for outlier trimming
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Trim the outlier
df = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]

# Check for remaining outliers
plt.figure()
sns.boxplot(x=df[column])
plt.title(f'Boxplot of {column}')
plt.show()

import matplotlib.pyplot as plt
# List of columns to check for outliers
columns = ['IronOre_mining_Index', 'Global_Price_of_IronOre', 'Dow_Jones', 'SandP_500', 'NASDAQ', 'Federal_funds_rate', 'OECD', 'China_and_US_Foreign_Exchange_Rate', 'Nikkei_Stock_Average', 'Global_Price', 'Primary_metal_production_index']

# Create boxplots for each column
for column in columns:
  plt.figure()
  sns.boxplot(x=df[column])
  plt.title(f'Boxplot of {column}')
  plt.show()

df

# prompt: now download cleaned data

df.to_csv('cleaned_iron_ore_data.csv', index=False)
files.download('cleaned_iron_ore_data.csv')